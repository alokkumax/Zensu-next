/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SalesTab = {
  _id: string;
  _type: "salesTab";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isCoupon?: boolean;
  couponCode?: string;
  percentOff?: number;
  active?: boolean;
  priority?: number;
};

export type Coupon = {
  _id: string;
  _type: "coupon";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  code?: string;
  percentOff?: number;
  active?: boolean;
  startsAt?: string;
  endsAt?: string;
};

export type NewsletterSubscription = {
  _id: string;
  _type: "newsletterSubscription";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email?: string;
  clerkUserId?: string;
  accountEmail?: string;
  accountName?: string;
  createdAt?: string;
};

export type ContactForm = {
  _id: string;
  _type: "contactForm";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  phone?: string;
  subject?: string;
  message?: string;
  clerkUserId?: string;
  accountEmail?: string;
  accountName?: string;
  createdAt?: string;
};

export type Address = {
  _id: string;
  _type: "address";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userEmail?: string;
  name?: string;
  fullName?: string;
  address?: string;
  road?: string;
  pinCode?: string;
  country?: string;
  state?: string;
  city?: string;
  isDefault?: boolean;
  phoneNumber?: string;
};

export type Blogcategory = {
  _id: string;
  _type: "blogcategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogcategory";
  }>;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Orders = {
  _id: string;
  _type: "orders";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  products?: Array<{
    productName?: string;
    productId?: string;
    quantity?: number;
    price?: number;
    image?: string;
    _key: string;
  }>;
  selectedAddress?: {
    fullName?: string;
    address?: string;
    city?: string;
    state?: string;
    pinCode?: string;
    phone?: string;
  };
  userDetails?: {
    userId?: string;
    userName?: string;
    userEmail?: string;
    userPhone?: string;
  };
  stripePaymentDetails?: {
    paymentIntentId?: string;
    checkoutSessionId?: string;
    amount?: number;
    currency?: string;
    status?: "pending" | "succeeded" | "failed" | "cancelled" | "refunded";
    paymentMethod?: string;
    last4?: string;
    brand?: string;
  };
  orderTotals?: {
    subtotal?: number;
    discount?: number;
    shipping?: number;
    tax?: number;
    total?: number;
  };
  orderDate?: string;
  orderStatus?: "pending" | "processing" | "shipped" | "delivered" | "cancelled" | "refunded";
  notes?: string;
  trackingNumber?: string;
  shippingMethod?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  videos?: Array<{
    upload?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    url?: string;
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  priceUAE?: number;
  discountUAE?: number;
  priceNPR?: number;
  discountNPR?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  status?: "new" | "hot" | "sale";
  variant?: "handbags" | "suitcases" | "bagpacks" | "others";
  isFeatured?: boolean;
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  range?: number;
  featured?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = SalesTab | Coupon | NewsletterSubscription | ContactForm | Address | Blogcategory | Blog | Author | Orders | Product | Brand | BlockContent | Category | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/query.ts
// Variable: BRANDS_QUERY
// Query: *[_type=='brand'] | order(name asc)
export type BRANDS_QUERYResult = Array<{
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: LATEST_BLOG_QUERY
// Query: *[_type == 'blog' && isLatest == true]|order(name asc){      ...,      blogcategories[]->{      title    }    }
export type LATEST_BLOG_QUERYResult = Array<{
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
}>;
// Variable: DEAL_PRODUCTS
// Query: *[_type == 'product' && status == 'hot'] | order(name asc){    ...,"categories": categories[]->title  }
export type DEAL_PRODUCTSResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  videos?: Array<{
    upload?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    url?: string;
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  priceUAE?: number;
  discountUAE?: number;
  priceNPR?: number;
  discountNPR?: number;
  categories: Array<string | null> | null;
  stock?: number;
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  status?: "hot" | "new" | "sale";
  variant?: "bagpacks" | "handbags" | "others" | "suitcases";
  isFeatured?: boolean;
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current == $slug] | order(name asc) [0]
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  videos?: Array<{
    upload?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    url?: string;
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  priceUAE?: number;
  discountUAE?: number;
  priceNPR?: number;
  discountNPR?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  status?: "hot" | "new" | "sale";
  variant?: "bagpacks" | "handbags" | "others" | "suitcases";
  isFeatured?: boolean;
} | null;
// Variable: BRAND_QUERY
// Query: *[_type == "product" && slug.current == $slug]{  "brandName": brand->title  }
export type BRAND_QUERYResult = Array<{
  brandName: string | null;
}>;
// Variable: MY_ORDERS_QUERY
// Query: *[_type == 'orders' && userDetails.userId == $userId] | order(orderDate desc){    _id,    orderNumber,    products[]{      productName,      productId,      quantity,      price,      image    },    selectedAddress,    userDetails,    stripePaymentDetails,    orderTotals,    orderDate,    orderStatus,    trackingNumber,    shippingMethod,    notes  }
export type MY_ORDERS_QUERYResult = Array<{
  _id: string;
  orderNumber: string | null;
  products: Array<{
    productName: string | null;
    productId: string | null;
    quantity: number | null;
    price: number | null;
    image: string | null;
  }> | null;
  selectedAddress: {
    fullName?: string;
    address?: string;
    city?: string;
    state?: string;
    pinCode?: string;
    phone?: string;
  } | null;
  userDetails: {
    userId?: string;
    userName?: string;
    userEmail?: string;
    userPhone?: string;
  } | null;
  stripePaymentDetails: {
    paymentIntentId?: string;
    checkoutSessionId?: string;
    amount?: number;
    currency?: string;
    status?: "cancelled" | "failed" | "pending" | "refunded" | "succeeded";
    paymentMethod?: string;
    last4?: string;
    brand?: string;
  } | null;
  orderTotals: {
    subtotal?: number;
    discount?: number;
    shipping?: number;
    tax?: number;
    total?: number;
  } | null;
  orderDate: string | null;
  orderStatus: "cancelled" | "delivered" | "pending" | "processing" | "refunded" | "shipped" | null;
  trackingNumber: string | null;
  shippingMethod: string | null;
  notes: string | null;
}>;
// Variable: GET_ALL_BLOG
// Query: *[_type == 'blog'] | order(publishedAt desc)[0...$quantity]{  ...,       blogcategories[]->{    title}    }
export type GET_ALL_BLOGResult = Array<{
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
}>;
// Variable: SINGLE_BLOG_QUERY
// Query: *[_type == "blog" && slug.current == $slug][0]{  ...,     author->{    name,    image,  },  blogcategories[]->{    title,    "slug": slug.current,  },}
export type SINGLE_BLOG_QUERYResult = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  blogcategories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  isLatest?: boolean;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
} | null;
// Variable: BLOG_CATEGORIES
// Query: *[_type == "blog"]{     blogcategories[]->{    ...    }  }
export type BLOG_CATEGORIESResult = Array<{
  blogcategories: Array<{
    _id: string;
    _type: "blogcategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
  }> | null;
}>;
// Variable: OTHERS_BLOG_QUERY
// Query: *[  _type == "blog"  && defined(slug.current)  && slug.current != $slug]|order(publishedAt desc)[0...$quantity]{...  publishedAt,  title,  mainImage,  slug,  author->{    name,    image,  },  categories[]->{    title,    "slug": slug.current,  }}
export type OTHERS_BLOG_QUERYResult = Array<{
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: Slug | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  categories: null;
}>;
// Variable: RELATED_PRODUCTS_QUERY
// Query: *[  _type == "product"  && variant == $variant  && slug.current != $currentSlug] | order(name asc)[0...$quantity]{  ...,  "categories": categories[]->title}
export type RELATED_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  videos?: Array<{
    upload?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      _type: "file";
    };
    url?: string;
    _key: string;
  }>;
  description?: string;
  price?: number;
  discount?: number;
  priceUAE?: number;
  discountUAE?: number;
  priceNPR?: number;
  discountNPR?: number;
  categories: Array<string | null> | null;
  stock?: number;
  brand?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "brand";
  };
  status?: "hot" | "new" | "sale";
  variant?: "bagpacks" | "handbags" | "others" | "suitcases";
  isFeatured?: boolean;
}>;
// Variable: COUPON_BY_CODE_QUERY
// Query: *[_type == 'coupon' && lower(code) == lower($code) && (active == true) && (!defined(startsAt) || startsAt <= now()) && (!defined(endsAt) || endsAt >= now())][0]{  _id,  name,  code,  percentOff}
export type COUPON_BY_CODE_QUERYResult = {
  _id: string;
  name: string | null;
  code: string | null;
  percentOff: number | null;
} | null;
// Variable: SALES_TABS_QUERY
// Query: *[_type == 'salesTab' && active == true] | order(priority asc, _createdAt desc){  _id,  title,  isCoupon,  couponCode,  percentOff}
export type SALES_TABS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  isCoupon: boolean | null;
  couponCode: string | null;
  percentOff: number | null;
}>;
// Variable: SEARCH_PRODUCTS_QUERY
// Query: *[_type == "product" && (name match $searchTerm || description match $searchTerm || categories[]->title match $searchTerm)] | order(name asc)[0...$limit]{  _id,  name,  slug,  price,  discount,  images,  "categories": categories[]->title,  variant}
export type SEARCH_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  categories: Array<string | null> | null;
  variant: "bagpacks" | "handbags" | "others" | "suitcases" | null;
}>;
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == 'category'] | order(title asc) {  _id,  title,  slug,  "productCount": count(*[_type == "product" && references(^._id)])}
export type ALL_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  productCount: number;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type=='brand'] | order(name asc) ": BRANDS_QUERYResult;
    " *[_type == 'blog' && isLatest == true]|order(name asc){\n      ...,\n      blogcategories[]->{\n      title\n    }\n    }": LATEST_BLOG_QUERYResult;
    "*[_type == 'product' && status == 'hot'] | order(name asc){\n    ...,\"categories\": categories[]->title\n  }": DEAL_PRODUCTSResult;
    "*[_type == \"product\" && slug.current == $slug] | order(name asc) [0]": PRODUCT_BY_SLUG_QUERYResult;
    "*[_type == \"product\" && slug.current == $slug]{\n  \"brandName\": brand->title\n  }": BRAND_QUERYResult;
    "*[_type == 'orders' && userDetails.userId == $userId] | order(orderDate desc){\n    _id,\n    orderNumber,\n    products[]{\n      productName,\n      productId,\n      quantity,\n      price,\n      image\n    },\n    selectedAddress,\n    userDetails,\n    stripePaymentDetails,\n    orderTotals,\n    orderDate,\n    orderStatus,\n    trackingNumber,\n    shippingMethod,\n    notes\n  }": MY_ORDERS_QUERYResult;
    "*[_type == 'blog'] | order(publishedAt desc)[0...$quantity]{\n  ...,  \n     blogcategories[]->{\n    title\n}\n    }\n  ": GET_ALL_BLOGResult;
    "*[_type == \"blog\" && slug.current == $slug][0]{\n  ..., \n    author->{\n    name,\n    image,\n  },\n  blogcategories[]->{\n    title,\n    \"slug\": slug.current,\n  },\n}": SINGLE_BLOG_QUERYResult;
    "*[_type == \"blog\"]{\n     blogcategories[]->{\n    ...\n    }\n  }": BLOG_CATEGORIESResult;
    "*[\n  _type == \"blog\"\n  && defined(slug.current)\n  && slug.current != $slug\n]|order(publishedAt desc)[0...$quantity]{\n...\n  publishedAt,\n  title,\n  mainImage,\n  slug,\n  author->{\n    name,\n    image,\n  },\n  categories[]->{\n    title,\n    \"slug\": slug.current,\n  }\n}": OTHERS_BLOG_QUERYResult;
    "*[\n  _type == \"product\"\n  && variant == $variant\n  && slug.current != $currentSlug\n] | order(name asc)[0...$quantity]{\n  ...,\n  \"categories\": categories[]->title\n}": RELATED_PRODUCTS_QUERYResult;
    "*[_type == 'coupon' && lower(code) == lower($code) && (active == true) && (!defined(startsAt) || startsAt <= now()) && (!defined(endsAt) || endsAt >= now())][0]{\n  _id,\n  name,\n  code,\n  percentOff\n}": COUPON_BY_CODE_QUERYResult;
    "*[_type == 'salesTab' && active == true] | order(priority asc, _createdAt desc){\n  _id,\n  title,\n  isCoupon,\n  couponCode,\n  percentOff\n}": SALES_TABS_QUERYResult;
    "*[_type == \"product\" && (name match $searchTerm || description match $searchTerm || categories[]->title match $searchTerm)] | order(name asc)[0...$limit]{\n  _id,\n  name,\n  slug,\n  price,\n  discount,\n  images,\n  \"categories\": categories[]->title,\n  variant\n}": SEARCH_PRODUCTS_QUERYResult;
    "*[_type == 'category'] | order(title asc) {\n  _id,\n  title,\n  slug,\n  \"productCount\": count(*[_type == \"product\" && references(^._id)])\n}": ALL_CATEGORIES_QUERYResult;
  }
}
